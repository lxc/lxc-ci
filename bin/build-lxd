#!/bin/sh -eu
GO_VERSION=${1}
GIT_REPOSITORY=${2}
GIT_REF=${3}
LXD_BACKEND=${4}
LXD_TESTSUITE=${5:-}

cleanup() {
    set +e
    echo "==> CLEANUP BEGIN"
    rm -f /tmp/build-lxd.$$
    if [ -d "${TEST_DIR}/logs" ] && [ -n "${WORKSPACE:-}" ]; then
        sudo tar zcf "${WORKSPACE}/logs.tar.gz" "${TEST_DIR}/logs/"
        sudo chown "$(id -u):$(id -g)" "${WORKSPACE}/logs.tar.gz"
    fi

    sudo rm -Rf "${TEST_DIR}"
    echo "==> CLEANUP DONE"

    [ "${SUCCESS}" = "0" ] && exit 1
    exit 0
}

echo "==> SETUP BEGIN"
echo "===> Sanity checks"
if [ ! -d "/lxc-ci/build/cache" ]; then
    echo "Build cache is missing, aborting"
    exit 1
fi

echo "===> Creating test environment"
SUCCESS=0
TEST_DIR=$(mktemp -d -p /lxc-ci/build/)
chmod +x "${TEST_DIR}"
trap cleanup EXIT HUP INT TERM

export TMPDIR=${TEST_DIR}/tmp
mkdir -p "${TMPDIR}"
chmod 1777 "${TMPDIR}"

# Setup Go
echo "===> Setting up Go compiler"
if [ "${GO_VERSION}" = "golang-tip" ]; then
    export PATH="/snap/go_tip/current/bin/:${PATH}"
else
    VER=$(echo ${GO_VERSION} | cut -d- -f2 | sed "s/\.//g")
    export PATH="/snap/go_${VER}/current/bin/:${PATH}"
fi

# Setup build environment
echo "===> Setting up environment variables"
mkdir -p "${TEST_DIR}/go"
export GOPATH=${TEST_DIR}/go
export PATH=${GOPATH}/bin:${PATH}
export GO111MODULE=off

# Setup dependencies
echo "===> Copying pre-built dependencies"
VERSION=$(go version | cut -d' ' -f3)
[ -d "/lxc-ci/build/cache/go/bin.${VERSION}" ] && cp -Ra "/lxc-ci/build/cache/go/bin.${VERSION}" "${GOPATH}/bin"
[ -d "/lxc-ci/build/cache/go/pkg.${VERSION}" ] && cp -Ra "/lxc-ci/build/cache/go/pkg.${VERSION}" "${GOPATH}/pkg"
[ -d "/lxc-ci/build/cache/go/src" ] && cp -Ra /lxc-ci/build/cache/go/src "${GOPATH}/src"
export GOCACHE="${GOPATH}/pkg"

# Setup Git
mkdir -p "${GOPATH}/src/github.com/lxc"
rm -Rf "${GOPATH}/src/github.com/lxc/lxd"
if [ -n "${WORKSPACE:-}" ]; then
    echo "===> Copying the Jenkins git repository"
    cp -R "${WORKSPACE}" "${GOPATH}/src/github.com/lxc/lxd"
    cd "${GOPATH}/src/github.com/lxc/lxd"
else
    echo "===> Cloning the git repository"
    git clone -q "${GIT_REPOSITORY}" "${GOPATH}/src/github.com/lxc/lxd"
    cd "${GOPATH}/src/github.com/lxc/lxd"
    git fetch -q "${GIT_REPOSITORY}" "+refs/pull/*:refs/remotes/origin/pr/*"
    git checkout -q "${GIT_REF}"
fi
echo "==> SETUP DONE"

# Print go version
echo "==> ENVIRONMENT BEGIN"

# Clustering
if [ -e "lxd/cluster" ]; then
    echo "===> Setting up for LXD clustering"
    export CGO_CFLAGS="-I/lxc-ci/build/cache/raft/include/ -I/lxc-ci/build/cache/dqlite/include/"
    export CGO_LDFLAGS="-L/lxc-ci/build/cache/raft/.libs/ -L/lxc-ci/build/cache/dqlite/.libs/"
    export LD_LIBRARY_PATH="/lxc-ci/build/cache/raft/.libs/:/lxc-ci/build/cache/dqlite/.libs/"
fi

# Networking
NETDEV="lxd-$$"
sudo ip link add dev ${NETDEV}-1 type veth peer name ${NETDEV}-2
sudo ip link set ${NETDEV}-1 master lxdbr0 up

echo "===> Environment variables"
env | sort
echo "===> Go version"
go version
echo "===> Kernel version"
uname -a
echo "==> ENVIRONMENT DONE"

# Build LXD
echo "==> BUILD BEGIN: lxd"
go get -t -d ./...
CGO_LDFLAGS_ALLOW="-Wl,-z,now" go install -tags libsqlite3 ./...
echo "==> BUILD DONE: lxd"

# Test namespace
mkdir -p "${TEST_DIR}/logs"
(
    cat << EOF
#!/bin/sh
set -eu

# Remount /proc
umount -l /proc
mount -t proc proc /proc

# Remount /sys
mount --move /sys /mnt
mount -t sysfs sysfs /sys
mount --move /mnt/fs/cgroup /sys/fs/cgroup
mount --move /mnt/kernel/security /sys/kernel/security
umount -l /mnt

# Setup separate locking
mkdir -p /run/lock
mount -t tmpfs tmpfs /run/lock

# Setup separate tmpfs
mount -t tmpfs tmpfs /tmp

# Setup the network
ip link set lo up
ip link add lxdbr0 up type bridge

# Setup host netns access
mkdir -p /run/netns
mount -t tmpfs tmpfs /run/netns
touch /run/netns/hostns
mount --bind /proc/1/ns/net /run/netns/hostns

# Pass minimal connectivity (for CEPHFS)
ip netns exec hostns ip link set ${NETDEV}-2 netns \$\$ up

mount -t tmpfs tmpfs /usr/local/bin
(
cat << EOE
#!/bin/sh
for arg in "\\\$@"; do
    if [ "\\\${arg}" = "map" ] || [ "\\\${arg}" = "unmap" ]; then
        exec ip netns exec hostns /usr/bin/\\\$(basename \\\$0) "\\\$@"
    fi
done
exec /usr/bin/\\\$(basename \\\$0) "\\\$@"
EOE
) > /usr/local/bin/in-hostnetns
chmod +x /usr/local/bin/in-hostnetns

# Setup ceph
ln -s in-hostnetns /usr/local/bin/rbd

# Disable CEPH on non-amd64
if [ "$(uname -m)" != "x86_64" ]; then
    unset LXD_CEPH_CLUSTER
fi

# Run the unit tests
if [ "${LXD_BACKEND}" = "dir" ]; then
    echo "==> UNIT BEGIN: all tests"
    GO_DQLITE_MULTITHREAD=1 go test -tags libsqlite3 ./...
    echo "==> UNIT DONE: all tests"
else
    echo "==> Static analysis will be skipped (only run on dir)"
    export LXD_SKIP_STATIC=1
fi

# Run the tests
cd "test/"
exec ./main.sh ${LXD_TESTSUITE}
EOF
) > /tmp/build-lxd.$$

# Only run CEPH tests when on a suitable test runner
CEPH_CLUSTER=
if ip -6 a | grep -q 2001:470:b0f8:1015; then
    CEPH_CLUSTER=ceph
fi

sudo -E "LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}" "LXD_LOGS=${TEST_DIR}/logs" "LXD_VERBOSE=1" "LXD_OFFLINE=1" "LXD_BACKEND=${LXD_BACKEND}" "LXD_CEPH_CLUSTER=${CEPH_CLUSTER}" "LXD_CEPH_CEPHFS=persist-cephfs" "LXD_TEST_IMAGE=/lxc-ci/build/cache/testimage.tar.xz" "PATH=${PATH}"  unshare -m -n -- sh /tmp/build-lxd.$$


SUCCESS=1
