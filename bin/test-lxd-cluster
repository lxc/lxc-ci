#!/bin/sh -eu

set -x
PREFIX="cluster-$(uuidgen)"

if [ -z "${1:-""}" ] || [ -z "${2:-""}" ] || [ -z "${3:-""}" ]; then
    echo "Usage: ${0} <count> <source channel> <destination channel>"
    exit 1
fi

# Deploy the cluster
echo "==> Deploying the cluster"

print_log() {
    echo "==> Start log file ${1}"
    log_file="${1}.log"
    lxc file pull "${1}/var/snap/lxd/common/lxd/logs/lxd.log" "${log_file}" || true
    cat "${log_file}" || true
    echo "<== End log file ${1}"
    rm -f "${log_file}"
}

# Cleanup on shutdown
SIZE="$1"
cleanup() {
    # Delete the cluster
    echo "==> Deleting the cluster"
    for i in $(seq "${SIZE}"); do
        print_log "${PREFIX}-$i"
        lxc delete --force "${PREFIX}-$i"
    done
}
trap cleanup EXIT HUP INT TERM

# Launch the container
lxc launch images:ubuntu/bionic "${PREFIX}-1" -c security.nesting=true

# Wait for network
while :; do
    lxc exec "${PREFIX}-1" -- ping -W1 -c1 linuxcontainers.org >/dev/null 2>&1 && break
    sleep 1
done

(
cat << EOF
deb http://us.archive.ubuntu.com/ubuntu bionic main universe
deb http://us.archive.ubuntu.com/ubuntu bionic-updates main universe
deb http://us.archive.ubuntu.com/ubuntu bionic-security main universe
EOF
) | lxc file push - "${PREFIX}-1"/etc/apt/sources.list

lxc exec "${PREFIX}-1" -- apt-get update
lxc exec "${PREFIX}-1" -- apt-get install snapd fuse curl --yes
lxc exec "${PREFIX}-1" -- sh -c "curl -s http://canonical-lxd.stgraber.org/config/snapd.sh | sh"
lxc exec "${PREFIX}-1" -- snap install core18
lxc exec "${PREFIX}-1" -- snap install core20
lxc stop "${PREFIX}-1"

for i in $(seq 2 "$1"); do
    lxc copy "${PREFIX}-1" "${PREFIX}-$i"
done

for i in $(seq "$1"); do
    lxc start "${PREFIX}-$i"

    # Wait for network
    while :; do
        lxc exec "${PREFIX}-$i" -- ping -W1 -c1 linuxcontainers.org >/dev/null 2>&1 && break
        sleep 1
    done

    lxc exec "${PREFIX}-$i" -- snap install lxd --channel="$2"

    # Configure the cluster
    if [ "$i" = "1" ]; then
        CLUSTER_IP=$(lxc exec "${PREFIX}-$i" -- ip -4 addr show dev eth0 scope global | grep inet | cut -d' ' -f6 | cut -d/ -f1)
        lxc exec "${PREFIX}-$i" -- lxc config set core.https_address "${CLUSTER_IP}:8443"
        lxc exec "${PREFIX}-$i" -- lxc config set cluster.https_address "${CLUSTER_IP}:8443"
        lxc exec "${PREFIX}-$i" -- lxc config set core.trust_password "cluster"
        lxc exec "${PREFIX}-$i" -- lxc cluster enable "${PREFIX}-$i"
        lxc exec "${PREFIX}-$i" -- lxc network create lxdfan0 bridge.mode=fan
        lxc exec "${PREFIX}-$i" -- lxc storage create default dir
        lxc exec "${PREFIX}-$i" -- lxc profile device add default root disk path=/ pool=default
        lxc exec "${PREFIX}-$i" -- lxc profile device add default eth0 nic name=eth0 network=lxdfan0
        lxc exec "${PREFIX}-$i" -- lxc network show lxdfan0
        CLUSTER_CRT=$(lxc file pull "${PREFIX}-$i"/var/snap/lxd/common/lxd/cluster.crt - | sed ':a;N;$!ba;s/\n/\n\n/g')
    else
        MEMBER_IP=$(lxc exec "${PREFIX}-$i" -- ip -4 addr show dev eth0 scope global | grep inet | cut -d' ' -f6 | cut -d/ -f1)

        (
        cat << EOF
cluster:
  server_name: "${PREFIX}-$i"
  enabled: true
  member_config: []
  cluster_address: ${CLUSTER_IP}:8443
  cluster_certificate: "${CLUSTER_CRT}"
  server_address: ${MEMBER_IP}:8443
  cluster_password: cluster
EOF
        ) | lxc exec "${PREFIX}-$i" -- lxd init --preseed
    fi
done

# Validate the cluster
echo "==> Validating the cluster"
lxc exec "${PREFIX}-1" -- lxc info
lxc exec "${PREFIX}-1" -- lxc cluster list

# Test fan networking (intra fan from container and host, as well as external NAT comms)
echo "==> Test fan networking"
lxc exec "${PREFIX}-1" -- lxc launch images:ubuntu/focal u1
lxc exec "${PREFIX}-1" -- lxc launch images:ubuntu/focal u2

echo "==> Wait for addresses"
sleep 10
lxc exec "${PREFIX}-1" -- lxc list

U2_IPV4="$(lxc exec "${PREFIX}-1" -- lxc list u2 -c4 --format=csv | cut -d' ' -f1)"
lxc exec "${PREFIX}-1" -- lxc exec u1 -- ping -c1 "${U2_IPV4}"
lxc exec "${PREFIX}-1" -- ping -c1 "${U2_IPV4}"

# Upgrade the cluster
echo "==> Upgrading the cluster"
for i in $(seq "$1"); do
    lxc exec "${PREFIX}-$i" -- snap refresh
    lxc exec "${PREFIX}-$i" -- snap switch lxd --channel="$3"
    if [ "$i" = "$1" ]; then
        lxc exec "${PREFIX}-$i" -- timeout 10m snap refresh lxd
    fi
done

# Wait a minute for things to settle
echo "==> Waiting 5 minutes for cluster to settle"
sleep 5m

# Validate the cluster
echo "==> Validating the cluster"
lxc exec "${PREFIX}-1" -- lxc info
lxc exec "${PREFIX}-1" -- lxc cluster list
