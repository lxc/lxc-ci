#!/bin/sh -eu
CNAME="distrobuilder-$(uuidgen)"

# Check arguments
if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ] || [ "${4:-}" = "" ]; then
    echo "Usage: ${0} <yaml> <architecture> <timeout> <target dir> [flags]"
    exit 1
fi

YAML=${1}
shift
ARCH=${1}
shift
TIMEOUT=${1}
shift
TARGET=${1}
shift

cleanup() {
    lxc delete --force "${CNAME}"
}

trap cleanup EXIT HUP INT TERM

# Create the container
lxc copy "cache-distrobuilder-${ARCH}" "${CNAME}"

# Start the container
lxc start "${CNAME}"

set -x

lxc file push "${YAML}" "${CNAME}/root/image.yaml"

(
cat << EOF
#!/bin/sh
# Wait for network
while :; do
    ping -W1 -c1 linuxcontainers.org >/dev/null 2>&1 && break
    sleep 1
done

set -eux

export PATH=/root/go/bin:\${PATH}
export GOPATH=/root/go/

# Workaround for plamo not liking dbus much
rm -f /run/dbus/system_bus_socket

# Build the image
mkdir /root/build
if [ "$(uname -m)" = "x86_64" ] || [ "$(uname -m)" = "i686" ]; then
    if ! echo "${YAML}" | grep -q sabayon; then
        mount -t tmpfs tmpfs /root/build -o size=5G,nr_inodes=10000000
    fi
fi
cp -R /root/go/src/github.com/lxc/distrobuilder/data /root/build/data
mv /root/image.yaml /root/build/
cd /root/build/
SERIAL=\$(date -u +%Y%m%d_%H:%M)
distrobuilder --timeout "${TIMEOUT}" build-dir image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
distrobuilder pack-lxc image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
distrobuilder pack-lxd image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
btrfs subvolume delete rootfs/var/lib/machines >/dev/null 2>&1 || true
rm -Rf rootfs
echo "\${SERIAL}" > serial

exit 0
EOF
) | lxc file push - "${CNAME}/root/build.sh" --mode=755
lxc exec "${CNAME}" -- /root/build.sh "$@"
lxc exec "${CNAME}" -- tar -cf - -C /root/build/ . | tar -xvf - -C "${TARGET}"

[ -n "${SUDO_UID:-}" ] && chown "${SUDO_UID}" -R "${TARGET}"
[ -n "${SUDO_GID:-}" ] && chgrp "${SUDO_GID}" -R "${TARGET}"
